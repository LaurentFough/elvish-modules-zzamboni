#+title: 1Password CLI (op) integration for Elvish
#+author: Diego Zamboni
#+email: diego@zzamboni.org

#+name: module-summary
This module provides wrappers to use the 1Password =op= CLI tool with Elvish.

This file is written in [[https://leanpub.com/lit-config][literate programming style]], to make it easy to explain. See [[file:1pass.elv][1pass.elv]] for the generated file.

* Table of Contents :TOC_3:noexport:
- [[#usage][Usage]]
- [[#implementation][Implementation]]
  - [[#configuration][Configuration]]
  - [[#authentication-and-token-manipulation][Authentication and token manipulation]]
  - [[#getting-item-information][Getting item information]]
  - [[#reading-op-shell-plugin-aliases][Reading op shell plugin aliases]]

* Usage

Install the =elvish-modules= package using [[https://elvish.io/ref/epm.html][epm]] (you can put these statements in your =rc.elv= file as well, to automatically install the package upon startup if needed):

#+begin_src elvish
use epm
epm:install &silent-if-installed github.com/LaurentFough/elvish-modules-zzamboni
#+end_src

In your =rc.elv=, load this module:

#+begin_src elvish
use github.com/LaurentFough/elvish-modules-zzamboni/1pass
#+end_src

* Implementation
:PROPERTIES:
:header-args:elvish: :tangle (concat (file-name-sans-extension (buffer-file-name)) ".elv")
:header-args: :mkdirp yes :comments no
:END:

Load some base modules.

#+begin_src elvish
use str
use re
use path
#+end_src

** Configuration

The account to use, defaults to =my=.

#+begin_src elvish
var account = my
#+end_src

The command to use, defaults to the =op= command.

#+begin_src elvish
var op = (external op)
#+end_src

The field name where the passwords are usually stored - don't modify this unless you know what you are doing.

#+begin_src elvish
var password-field = "password"
#+end_src

** Authentication and token manipulation

Get the current session token. Returns =$nil= if not set.

#+begin_src elvish
fn session-token {|&account=$account|
  if (has-env OP_SESSION_$account) {
    get-env OP_SESSION_$account
  } else {
    put $nil
  }
}
#+end_src

Set the token environment variable

#+begin_src elvish
fn set-token {|&account=$account token|
  set-env OP_SESSION_$account $token
}
#+end_src

Refresh the current login token, reauthenticating if needed. Reauthentication can be forced by using the =&no-refresh= option.

Note that this assumes you have logged in at least once with the full =op signin= syntax, to specify the account and your email address, as described in [[https://support.1password.com/command-line/#sign-in-or-out][the =op= documentation]].

#+begin_src elvish
fn signin {|&account=$account &no-refresh=$false|
  var refresh-opts = [ --session (session-token) ]
  if $no-refresh {
    set refresh-opts = []
  }
  set-token &account=$account ($op signin --raw $@refresh-opts </dev/tty)
}
#+end_src

** Getting item information

Base function to get item information. This function returns the raw string output from the command.

#+begin_src elvish
fn get-item-raw {|item &options=[] &fields=[]|
  signin
  if (not-eq $fields []) {
    set options = [ $@options --fields (str:join , $fields) ]
  } else {
    set options = [ $@options ]
  }
  $op item get $@options $item | slurp
}
#+end_src

The main function is the same, but it parses the return value from JSON into an Elvish map.

#+begin_src elvish
fn get-item {|item &options=[] &fields=[]|
  if (!= (count $fields) 1) {
    set options = [ $@options --format json ]
  }
  var item-str = (get-item-raw &options=$options &fields=$fields $item)
  if (== (count $fields) 1) {
    put $item-str
  } else {
    echo $item-str | from-json
  }
}
#+end_src

One of the most common use cases is to get the password stored in an item, so we have a special function for this.

#+begin_src elvish
fn get-password {|item|
  get-item &fields=[$password-field] $item
}
#+end_src

** Reading op shell plugin aliases

This function reads =$1pass:op_plugins_file= (default =~/.config/op/plugins.sh=) and parses the alias definitions, defining them as Elvish functions.

#+begin_src elvish
var op_plugins_file = ~/.config/op/plugins.sh
#+end_src

#+begin_src elvish
fn read-aliases {
  if (path:is-regular $op_plugins_file) {
    cat $op_plugins_file | each {|l|
      var m = [(re:find '^alias (\w+)="(.*?)"' $l)]
      if (not-eq $m []) {
        var name = $m[0][groups][1][text]
        var cmd = [(edit:wordify $m[0][groups][2][text])]
        var fndef = (print 'edit:add-var '$name'~ {|@_args| ' $@cmd '$@_args }' | slurp)
        eval $fndef
      }
      if (re:find '^export' $l) {
        var _ key val = (re:split &max=3 '[ =]' $l)
        set-env $key $val
      }
    }
  }
}
#+end_src
